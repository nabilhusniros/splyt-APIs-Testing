{
	"info": {
		"_postman_id": "aaaaeb3f-6e3c-4d1b-8ce8-c32bd06200d2",
		"name": "Splyt API's",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16119130"
	},
	"item": [
		{
			"name": "Create a journey (Positive testing with valid url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Here I'm Asserting the response code should be 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Here I'm Asserting that the response should not be empty.\r",
							"pm.test(\"Response should not be Empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an(\"object\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"//Here I'm Asserting the property type.\r",
							"pm.test(\"Response have correct type\", function() {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"_id\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"pickup\").that.is.an(\"object\");\r",
							"    pm.expect(response.pickup).to.have.property(\"latitude\").that.is.a(\"number\");\r",
							"    pm.expect(response.pickup).to.have.property(\"longitude\").that.is.a(\"number\");\r",
							"    pm.expect(response).to.have.property(\"passenger\").that.is.an(\"object\");\r",
							"    pm.expect(response.passenger).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(response.passenger).to.have.property(\"surname\").that.is.a(\"string\");\r",
							"    pm.expect(response.passenger).to.have.property(\"phone_number\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"departure_date\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"//Here I'm Asserting that the response time should be less then 5 seconds.\r",
							"pm.test(\"Response time is within acceptable limit\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Extract ID from response and save to environment variable\", function () {\r",
							"    var response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property(\"_id\");\r",
							"    pm.environment.set(\"journeyId\", response._id);\r",
							"\r",
							"    console.log(\"Saved ID:\", response._id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"departure_date\": \"2025-01-22T13:12:00.703Z\",\r\n  \"pickup\": {\r\n    \"latitude\": 50,\r\n    \"longitude\": 20\r\n  },\r\n  \"passenger\": {\r\n    \"name\": \"Nabil\",\r\n    \"surname\": \"Husni Ros\",\r\n    \"phone_number\": \"+\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/journeys",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"journeys"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a journey (Negative testing with invalid url)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Here I'm Asserting the response code should be 404.\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"//Here I'm Asserting that the response time should be less then 5 seconds.\r",
							"pm.test(\"Response time is within acceptable limit\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"//Here I'm Asserting the Error message in response.\r",
							"pm.test(\"Validate error response for invalid method\", function () {\r",
							"    const responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.be.a(\"string\").that.is.not.empty;\r",
							"\r",
							"    // Validate that the response contains expected error messages\r",
							"    const expectedMessages = [\"Not Found\"];\r",
							"    pm.expect(expectedMessages).to.include(responseText);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"departure_date\": \"2025-01-22T13:12:00.703Z\",\r\n  \"pickup\": {\r\n    \"latitude\": 50,\r\n    \"longitude\": 20\r\n  },\r\n  \"passenger\": {\r\n    \"name\": \"Nabil\",\r\n    \"surname\": \"Husni Ros\",\r\n    \"phone_number\": \"+60183507611\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/journeyss",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"journeyss"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a journey (Negative testing with empty required field)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Here I'm Asserting the response code should be 400.\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"//Here I'm Asserting the Error response message.\r",
							"pm.test(\"Response has the error response message\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    pm.expect(response).to.have.property(\"name\", \"ApiError\");\r",
							"    pm.expect(response).to.have.property(\"code\", \"REQUEST_VALIDATION_FAILURE\");\r",
							"    pm.expect(response).to.have.property(\"message\", \"request failed body validation\");\r",
							"    pm.expect(response).to.have.property(\"info\").that.is.an(\"array\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"//Here I'm Asserting the info Error response message.\r",
							"pm.test(\"Response has the info error response message\", function () {\r",
							"    pm.expect(pm.response.json().info[0].message).to.equal(\"\\\"departure_date\\\" is not allowed to be empty\");\r",
							"    pm.expect(pm.response.json().info[1].message).to.equal(\"\\\"departure_date\\\" with value \\\"\\\" fails to match the required pattern: /\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}/\");\r",
							"    pm.expect(pm.response.json().info[2].message).to.equal(\"\\\"latitude\\\" must be a number\");\r",
							"    pm.expect(pm.response.json().info[3].message).to.equal(\"\\\"longitude\\\" must be a number\");\r",
							"    pm.expect(pm.response.json().info[4].message).to.equal(\"\\\"name\\\" is not allowed to be empty\");\r",
							"    pm.expect(pm.response.json().info[5].message).to.equal(\"\\\"phone_number\\\" is not allowed to be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"//Here I'm Asserting that the response time should be less then 5 seconds.\r",
							"pm.test(\"Response time is within acceptable limit\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"departure_date\": \"\",\r\n  \"pickup\": {\r\n    \"latitude\": null,\r\n    \"longitude\": null\r\n  },\r\n  \"passenger\": {\r\n    \"name\": \"\",\r\n    \"surname\": \"Husni Ros\",\r\n    \"phone_number\": \"\"\r\n  }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api/journeys",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"journeys"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find and return document by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Here I'm Asserting the response code should be 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Here I'm Asserting that the response should not be empty.\r",
							"pm.test(\"Response should not be Empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an(\"object\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"//Here I'm Asserting the property type.\r",
							"pm.test(\"Response have correct type\", function() {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"_id\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"pickup\").that.is.an(\"object\");\r",
							"    pm.expect(response.pickup).to.have.property(\"latitude\").that.is.a(\"number\");\r",
							"    pm.expect(response.pickup).to.have.property(\"longitude\").that.is.a(\"number\");\r",
							"    pm.expect(response).to.have.property(\"passenger\").that.is.an(\"object\");\r",
							"    pm.expect(response.passenger).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    pm.expect(response.passenger).to.have.property(\"surname\").that.is.a(\"string\");\r",
							"    pm.expect(response.passenger).to.have.property(\"phone_number\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"departure_date\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"//Here I'm Asserting that the response time should be less then 5 seconds.\r",
							"pm.test(\"Response time is within acceptable limit\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/api/journeys/{{journeyId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"journeys",
						"{{journeyId}}"
					]
				}
			},
			"response": []
		}
	]
}